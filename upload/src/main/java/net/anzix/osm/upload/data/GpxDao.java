package net.anzix.osm.upload.data;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import net.anzix.osm.upload.data.Gpx;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GPX.
*/
public class GpxDao extends AbstractDao<Gpx, Long> {

    public static final String TABLENAME = "GPX";

    /**
     * Properties of entity Gpx.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Uploaded = new Property(3, java.util.Date.class, "uploaded", false, "UPLOADED");
        public final static Property Created = new Property(4, java.util.Date.class, "created", false, "CREATED");
    };


    public GpxDao(DaoConfig config) {
        super(config);
    }
    
    public GpxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GPX' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TYPE' TEXT NOT NULL ," + // 1: type
                "'LOCATION' TEXT NOT NULL ," + // 2: location
                "'UPLOADED' INTEGER," + // 3: uploaded
                "'CREATED' INTEGER);"); // 4: created
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GPX'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gpx entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getType());
        stmt.bindString(3, entity.getLocation());
 
        java.util.Date uploaded = entity.getUploaded();
        if (uploaded != null) {
            stmt.bindLong(4, uploaded.getTime());
        }
 
        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(5, created.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gpx readEntity(Cursor cursor, int offset) {
        Gpx entity = new Gpx( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // type
            cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // uploaded
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // created
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gpx entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getString(offset + 1));
        entity.setLocation(cursor.getString(offset + 2));
        entity.setUploaded(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setCreated(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gpx entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gpx entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
